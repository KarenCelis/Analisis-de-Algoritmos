import java.awt.List;
import java.util.Arrays;
//import java.util.Iterator;

public class MergeSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		 int arr[] = {-1,0,10,40}; 
		 int arr1[] = {-5,-4,1,15}; 
		 int arr2[]= intercalar(arr, arr1);
		 int n = arr2.length; 
	        for (int i=0; i<n; ++i) {
	            System.out.print(arr2[i] + " "); 
	        System.out.println(); 
	        }
	    /**   
	  	  char[] copyFrom = {'d', 'e', 'c', 'a', 'f', 'f', 'e',
		            'i', 'n', 'a', 't', 'e', 'd'};
		            
		        char[] copyTo = java.util.Arrays.copyOfRange(copyFrom, 2, 9);
		        
		        int n = copyTo.length; 
		        for (int i=0; i<n; ++i) {
		            System.out.print(copyTo[i] + " "); 
		        System.out.println(); 
		        //System.out.println(new String(copyTo));
		        }
		        
		
	        
		 int list[] = {1,2,3,5,6,7,8,8,9,9,10,11,34}; 
		int a=infinito(list, 5, 1);
		System.out.println(a);
		**/
	}

	
@SuppressWarnings("unused")
public static int[] intercalar(int[] list1,int[] list2) {
int [] list3 = null;
//list3=java.util.Arrays.copyOfRange(list1,0,list1.length-1);
int [] list4 = null;
//list4=java.util.Arrays.copyOfRange(list2, 0, list2.length-1);



	if(list1.length==0)
		return list2;
	else if(list2.length==0)
		
	return list1;

		
	if(list1[0]<list2[0]){
	 list3=java.util.Arrays.copyOfRange(list1,0,list1.length-1);
	System.out.println(list3.length + "aaaaaaaaa");
			return intercalar(list3,list2);
			}
	else
	{
	list4=java.util.Arrays.copyOfRange(list2, 0, list2.length-1);
	System.out.println(list4.length +"eeeeeeeeeeeeeee");
			return intercalar(list1, list4);
			
	}
		
	}
/***
public static int[] ordenar(int[] list) {
	
	
	if(list.length<=1)
		return list;
	
 int pivote=(list.length)/2;
 intercalar(ordenar(0,pivote),ordenar(pivote,list.length));
	
	
}

**/
public static int infinito(int[] list, int k, int voy) {
	int [] list1 = null;
	if(list[0]==k)
		//	System.out.println(list[0]);
		return 0;
	else if(list[voy]==k)
		//System.out.println(list[voy]);
		return voy;
	if(list[voy]<k)
		return infinito(list,k,voy*2);
	//System.out.println(list[voy]);
	if(list[voy]>k) 
		list1= java.util.Arrays.copyOfRange(list, voy/2, voy);
	//System.out.println("aaaaaaaaaa");
	return voy/2+infinito(list1,k,1);
	
	
		
		
		}

}



	

